{"ast":null,"code":"var _jsxFileName = \"D:\\\\RamS_Sych\\\\Trello_Clone_107\\\\src\\\\AppStateContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport * as uuid from 'uuid';\nimport React, { createContext, useReducer, useContext } from 'react';\nimport { findItemIndexById } from './utils/findItemIndexById';\nimport { moveItem } from './utils/moveItem';\nimport _ from 'lodash';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst appData = {\n  lists: [{\n    id: \"0\",\n    text: \"To Do\",\n    desc: '',\n    tasks: [{\n      id: \"task1\",\n      text: \"This is Task Title\",\n      desc: \"This is some Description\"\n    }]\n  }, {\n    id: \"1\",\n    text: \"In Progress\",\n    desc: '',\n    tasks: [{\n      id: \"task2\",\n      text: \"Another Title\",\n      desc: \"Default description\"\n    }]\n  }, {\n    id: \"2\",\n    text: \"Complete\",\n    desc: '',\n    tasks: [{\n      id: \"task3\",\n      text: \"Another Title\",\n      desc: \" Task DEscription\"\n    }]\n  }],\n  draggedItem: undefined\n};\nlet storedStringData = localStorage.getItem('data');\nlet parsedStoredData = JSON.parse(storedStringData) || appData;\nlocalStorage.setItem('data', JSON.stringify(parsedStoredData));\n\nconst appStateReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_LIST':\n      {\n        let stringData = localStorage.getItem('data');\n        let storedAppData = JSON.parse(stringData);\n        storedAppData.lists.push({\n          id: uuid.v1(),\n          text: action.payload,\n          tasks: [],\n          desc: action.payload\n        });\n        localStorage.setItem('data', JSON.stringify(storedAppData));\n        return { ...state,\n          lists: [...state.lists, {\n            id: uuid.v1(),\n            text: action.payload,\n            tasks: [],\n            desc: action.payload\n          }]\n        };\n      }\n\n    case 'ADD_TASK':\n      {\n        const targedtLaneIndex = findItemIndexById(state.lists, action.payload.taskId);\n        let stringData = localStorage.getItem('data');\n        let storedAppData = JSON.parse(stringData);\n        storedAppData.lists[targedtLaneIndex].tasks.push({\n          id: uuid.v1(),\n          text: action.payload.text,\n          desc: action.payload.desc\n        });\n        localStorage.setItem('data', JSON.stringify(storedAppData));\n        state.lists[targedtLaneIndex].tasks.push({\n          id: uuid.v1(),\n          text: action.payload.text,\n          desc: action.payload.desc\n        });\n        return { ...state\n        };\n      }\n\n    case 'DELETE_TASK':\n      {\n        const targedtLaneIndex = findItemIndexById(state.lists, action.payload.columnId);\n        let stringData = localStorage.getItem('data');\n        let storedAppData = JSON.parse(stringData);\n        const taskList = storedAppData.lists[targedtLaneIndex]['tasks'];\n\n        _.remove(taskList, n => n.id === action.payload.taskId); // const removedItem = _.remove(taskList, (n) => n.id === action.payload.taskId);\n\n\n        storedAppData.lists[targedtLaneIndex]['tasks'] = taskList;\n        localStorage.setItem('data', JSON.stringify(storedAppData));\n        state.lists[targedtLaneIndex]['tasks'] = taskList;\n        return { ...state\n        };\n      }\n\n    case 'MOVE_LIST':\n      {\n        const {\n          dragIndex,\n          hoverIndex\n        } = action.payload;\n        state.lists = moveItem(state.lists, dragIndex, hoverIndex);\n        return { ...state\n        };\n      }\n\n    case 'SET_DRAGGED_ITEM':\n      {\n        return { ...state,\n          draggedItem: action.payload\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n};\n\nconst AppStateContext = /*#__PURE__*/createContext({});\nexport const AppStateProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  let stringData = localStorage.getItem('data');\n  let storedData = JSON.parse(stringData);\n  const [state, dispatch] = useReducer(appStateReducer, storedData);\n  return /*#__PURE__*/_jsxDEV(AppStateContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppStateProvider, \"QiplHz3qW5pC+XhU/ltf8YRqevw=\");\n\n_c = AppStateProvider;\nexport const useAppState = () => {\n  _s2();\n\n  return useContext(AppStateContext);\n};\n\n_s2(useAppState, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"AppStateProvider\");","map":{"version":3,"names":["uuid","React","createContext","useReducer","useContext","findItemIndexById","moveItem","_","appData","lists","id","text","desc","tasks","draggedItem","undefined","storedStringData","localStorage","getItem","parsedStoredData","JSON","parse","setItem","stringify","appStateReducer","state","action","type","stringData","storedAppData","push","v1","payload","targedtLaneIndex","taskId","columnId","taskList","remove","n","dragIndex","hoverIndex","AppStateContext","AppStateProvider","children","storedData","dispatch","useAppState"],"sources":["D:/RamS_Sych/Trello_Clone_107/src/AppStateContext.tsx"],"sourcesContent":["import * as uuid from 'uuid'\r\nimport React, { createContext, useReducer, useContext } from 'react';\r\nimport { findItemIndexById } from './utils/findItemIndexById'\r\nimport { moveItem } from './utils/moveItem'\r\nimport { DragItem } from './DragItem'\r\nimport _ from 'lodash';\r\n\r\ninterface Task {\r\n  id: string\r\n  text: string,\r\n  desc: string\r\n}\r\n\r\ninterface List {\r\n  id: string\r\n  text: string\r\n  tasks: Task[]\r\n  desc: string\r\n}\r\n\r\nexport interface AppState {\r\n  lists: List[],\r\n  draggedItem: DragItem | undefined\r\n}\r\n\r\nconst appData: AppState = {\r\n  lists: [\r\n    {\r\n      id: \"0\",\r\n      text: \"To Do\",\r\n      desc: '',\r\n      tasks: [{ id: \"task1\", text: \"This is Task Title\", desc: \"This is some Description\" }]\r\n    },\r\n    {\r\n      id: \"1\",\r\n      text: \"In Progress\",\r\n      desc: '',\r\n      tasks: [{ id: \"task2\", text: \"Another Title\", desc: \"Default description\" }]\r\n    },\r\n    {\r\n      id: \"2\",\r\n      text: \"Complete\",\r\n      desc: '',\r\n      tasks: [{ id: \"task3\", text: \"Another Title\", desc: \" Task DEscription\" }]\r\n    }\r\n  ],\r\n  draggedItem: undefined\r\n}\r\nlet storedStringData = localStorage.getItem('data')\r\nlet parsedStoredData = JSON.parse(storedStringData) || appData;\r\nlocalStorage.setItem('data', JSON.stringify(parsedStoredData));\r\n\r\ntype Action =\r\n  | {\r\n    type: \"ADD_LIST\"\r\n    payload: string\r\n  }\r\n  | {\r\n    type: \"ADD_TASK\"\r\n    payload: {\r\n      text: string; taskId: string; desc: string\r\n    }\r\n  }\r\n  |\r\n  {\r\n    type: \"DELETE_TASK\"\r\n    payload: { taskId: string, columnId: string }\r\n  }\r\n  | {\r\n    type: 'MOVE_LIST',\r\n    payload: {\r\n      dragIndex: number\r\n      hoverIndex: number\r\n    }\r\n  } | {\r\n    type: \"SET_DRAGGED_ITEM\"\r\n    payload: DragItem | undefined\r\n  } \r\n\r\ninterface AppStateContextProps {\r\n  state: AppState\r\n  dispatch(action: Action): void\r\n}\r\n\r\nconst appStateReducer = (state: AppState, action: Action): AppState => {\r\n  switch (action.type) {\r\n    case 'ADD_LIST': {\r\n      let stringData = localStorage.getItem('data');\r\n      let storedAppData = JSON.parse(stringData);\r\n      storedAppData.lists.push({ id: uuid.v1(), text: action.payload, tasks: [], desc: action.payload })\r\n      localStorage.setItem('data', JSON.stringify(storedAppData))\r\n      return {\r\n        ...state,\r\n        lists: [\r\n          ...state.lists, {\r\n            id: uuid.v1(), text: action.payload, tasks: [], desc: action.payload\r\n          }\r\n        ]\r\n      }\r\n    }\r\n\r\n    case 'ADD_TASK': {\r\n      const targedtLaneIndex = findItemIndexById(state.lists, action.payload.taskId);\r\n\r\n      let stringData = localStorage.getItem('data');\r\n      let storedAppData = JSON.parse(stringData);\r\n      storedAppData.lists[targedtLaneIndex].tasks.push({\r\n        id: uuid.v1(),\r\n        text: action.payload.text,\r\n        desc: action.payload.desc\r\n      })\r\n      localStorage.setItem('data', JSON.stringify(storedAppData))\r\n\r\n      state.lists[targedtLaneIndex].tasks.push({\r\n        id: uuid.v1(),\r\n        text: action.payload.text,\r\n        desc: action.payload.desc\r\n      });\r\n      return {\r\n        ...state\r\n      }\r\n    }\r\n\r\n    case 'DELETE_TASK': {\r\n      const targedtLaneIndex = findItemIndexById(state.lists, action.payload.columnId);\r\n      let stringData = localStorage.getItem('data');\r\n      let storedAppData = JSON.parse(stringData);\r\n      const taskList = storedAppData.lists[targedtLaneIndex]['tasks'];\r\n       _.remove(taskList, (n) => n.id === action.payload.taskId);\r\n      // const removedItem = _.remove(taskList, (n) => n.id === action.payload.taskId);\r\n      storedAppData.lists[targedtLaneIndex]['tasks'] = taskList;\r\n      localStorage.setItem('data', JSON.stringify(storedAppData))\r\n      state.lists[targedtLaneIndex]['tasks'] = taskList;\r\n      return {\r\n        ...state\r\n      }\r\n    }\r\n\r\n    case 'MOVE_LIST': {\r\n      const { dragIndex, hoverIndex } = action.payload;\r\n      state.lists = moveItem(state.lists, dragIndex, hoverIndex);\r\n      return { ...state }\r\n    }\r\n    case 'SET_DRAGGED_ITEM': {\r\n      return { ...state, draggedItem: action.payload }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps);\r\n\r\nexport const AppStateProvider = ({ children }: React.PropsWithChildren<{}>) => {\r\n  let stringData = localStorage.getItem('data');\r\n  let storedData = JSON.parse(stringData);\r\n  const [state, dispatch] = useReducer(appStateReducer, storedData);\r\n  return (\r\n    <AppStateContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </AppStateContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useAppState = () => {\r\n  return useContext(AppStateContext)\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}